; {{ ansible_managed }}

; Set garbage collection threshold to 100 Mbyte.
(setq gc-cons-threshold (* 100 1000 1000))

; Enable package repositories.
(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("melpa-stable" . "https://stable.melpa.org/packages/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))
(package-initialize)

; use-package
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)

; Be evil!
(use-package evil
  :ensure t
  :init
  :config
  (evil-mode 1))

(use-package all-the-icons)

(use-package doom-modeline
  :ensure t
  :init
  (setq doom-modeline-modal-icon nil)
  (setq evil-normal-state-tag   (propertize "N"))
  (setq evil-insert-state-tag   (propertize "I"))
  (setq evil-visual-state-tag   (propertize "V"))
  (setq evil-emacs-state-tag    (propertize "E"))
  (setq evil-motion-state-tag   (propertize "M"))
  (setq evil-operator-state-tag (propertize "O"))
  :hook (after-init . doom-modeline-mode))

; Markdown
(use-package markdown-mode
  :ensure t
  :init (setq markdown-command "multimarkdown")
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode)))

(use-package org-roam
  :ensure t
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory (file-truename "{{ emacs_org_roam_directory }}"))
  (org-roam-completion-everywhere t)
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n g" . org-roam-graph)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n c" . org-roam-capture)
         ("C-c n j" . org-roam-dailies-capture-today)
         :map org-mode-map
         ("C-M-i"   . completion-at-point))
  :config
  (org-roam-db-autosync-mode)
  (require 'org-roam-protocol))

(use-package vertico
  :ensure t
  :init
  (vertico-mode))

(use-package orderless
  :ensure t
  :init
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))

; (server-start) ; Enable server so other emacsclient connect to this.
(setq inhibit-startup-message t) ; Disable startup message.
(menu-bar-mode -1)   ; Disable the menu bar.
(tool-bar-mode -1)   ; Disable the toolbar.
(scroll-bar-mode -1) ; Disable the scrollbar
(setq visible-bell 1) ; Enable visual bell.

; Theme
(use-package doom-themes
  :ensure t
  :config
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)
  (load-theme 'doom-nord t))

; Show the max column indicator in programming modes.
(add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)

; Set default indentation to 4 spaces.
(setq-default tab-width 4)
(setq-default evil-shift-width tab-width)

; expandtab
(setq-default indent-tabs-mode nil)
