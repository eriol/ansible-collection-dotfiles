; {{ ansible_managed }}

; Set garbage collection threshold to 100 Mbyte.
(setq gc-cons-threshold (* 100 1024 1024))

; Enable package repositories.
(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("melpa-stable" . "https://stable.melpa.org/packages/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))
(package-initialize)

; use-package
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)

; keep packages updated automatically
; (use-package auto-package-update
;   :config
;   (setq auto-package-update-delete-old-versions t)
;   (setq auto-package-update-hide-results t)
;   (auto-package-update-maybe))

; Be evil!
(use-package evil
  :ensure t
  :init
  :config
  (evil-mode 1)
  (evil-define-key 'normal org-mode-map (kbd "<tab>") #'org-cycle)
  (evil-define-key 'normal 'global (kbd "C-n") #'treemacs)
  (evil-set-undo-system 'undo-fu))

(use-package general
  :ensure t
  :config
  (general-evil-setup t)

  (general-create-definer eriol/leader-key-def
    :prefix ",")

  (eriol/leader-key-def
    :keymaps 'normal
    "rf" 'org-roam-node-find
    "oc" 'org-capture
    "a" 'org-agenda))

(use-package undo-fu
  :ensure t)

(use-package all-the-icons)

(use-package doom-modeline
  :ensure t
  :init
  (setq doom-modeline-modal-icon nil)
  (setq evil-normal-state-tag   (propertize "N"))
  (setq evil-insert-state-tag   (propertize "I"))
  (setq evil-visual-state-tag   (propertize "V"))
  (setq evil-emacs-state-tag    (propertize "E"))
  (setq evil-motion-state-tag   (propertize "M"))
  (setq evil-operator-state-tag (propertize "O"))
  :hook (after-init . doom-modeline-mode))

(use-package treemacs
  :ensure t
  :config
  (progn
    (setq treemacs-default-visit-action 'treemacs-visit-node-close-treemacs
      treemacs-show-hidden-files nil)))

(use-package treemacs-evil
  :after (treemacs evil)
  :ensure t
  :config
  ; Remap C-n of global-map to treemacs
  (global-set-key (kbd "C-n") #'treemacs))

; Markdown
(use-package markdown-mode
  :ensure t
  :init (setq markdown-command "multimarkdown")
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode)))

(use-package org
  :ensure t
  :config
  (setq org-agenda-files
    '("{{ emacs_org_directory }}/inbox.org"))
  (setq org-capture-templates
    '(("d" "Default" entry (file+headline "{{ emacs_org_directory }}/inbox.org" "Inbox")
      "* TODO %?\n  %i\n  %a")))
  (setq org-todo-keywords
    '((sequence "TODO(t)" "STARTED(s!)" "NEXT(n)" "WAITING(w!)" "|" "DONE(d!)" "CANCELLED(c!)")
      (sequence "TOREAD" "STARTED(s!)" "|" "FINISHED(f!)")))
  (setq org-log-done 'time)
  (set-face-attribute 'org-document-title nil :font "Fira Code" :weight 'bold :height 1.3)
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 0.95)
                  (org-level-6 . 0.90)
                  (org-level-7 . 0.85)
                  (org-level-8 . 0.80)))
    (set-face-attribute (car face) nil :font "Fira Code" :weight 'medium :height (cdr face)))
  (add-hook 'org-capture-mode-hook 'evil-insert-state))

(use-package org-superstar
  :ensure t
  :after org
  :hook (org-mode . org-superstar-mode)
  :custom
  (org-superstar-remove-leading-stars t))

(use-package org-roam
  :ensure t
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory (file-truename "{{ emacs_org_roam_directory }}"))
  (org-roam-completion-everywhere t)
  (org-roam-capture-templates
   '(("d" "default" plain
      "%?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
      :unnarrowed t)
     ("p" "projects" plain
      "%?\n* Tasks\n\n** TODO tasks go here!"
      :if-new (file+head "projects/${slug}.org" "#+title: ${title}\n#+filetags: :has_todos:project:")
      :unnarrowed t)))
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n g" . org-roam-graph)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n c" . org-roam-capture)
         ("C-c n j" . org-roam-dailies-capture-today)
         :map org-mode-map
         ("C-M-i"   . completion-at-point))
  :config
  (org-roam-db-autosync-mode)
  (require 'org-roam-protocol)

  (defun org-agenda-has-todos-files ()
    "Return a list of note files containing 'has_todos' tag."
    (seq-uniq
      (seq-map
        #'car
        (org-roam-db-query [
          :select [nodes:file]
          :from tags
          :left-join nodes
          :on (= tags:node-id nodes:id)
          :where (like tag (quote "%\"has_todos\"%"))]))))

  (defun org-agenda-files-update (&rest _)
    "Update the value of `org-agenda-files'."
    (setq org-agenda-files (org-agenda-has-todos-files)))

  (advice-add 'org-agenda :before #'org-agenda-files-update)


  (require 'org-indent)

) ; End of use-package org-roam block

(use-package websocket
  :esnure t
  :after org-roam)

(use-package org-roam-ui
  :ensure t
  :after org-roam
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))

(use-package vertico
  :ensure t
  :init
  (vertico-mode))

(use-package orderless
  :ensure t
  :init
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))

(use-package yaml-mode
  :ensure t)

; (server-start) ; Enable server so other emacsclient connect to this.
(setq inhibit-startup-message t) ; Disable startup message.
(menu-bar-mode -1)   ; Disable the menu bar.
(tool-bar-mode -1)   ; Disable the toolbar.
(scroll-bar-mode -1) ; Disable the scrollbar.
(blink-cursor-mode -1)
(column-number-mode t)

; Theme
(use-package doom-themes
  :ensure t
  :config
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)
  (load-theme 'doom-nord t)
  (doom-themes-visual-bell-config))

; Show the max column indicator in programming modes.
(add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)

; Set default indentation to 4 spaces.
(setq-default tab-width 4)
(setq-default evil-shift-width tab-width)

; expandtab
(setq-default indent-tabs-mode nil)
